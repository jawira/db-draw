<?xml version="1.0" encoding="UTF-8"?>
<project name="DB draw" default="help" phingVersion="3">

  <property name="dc.project-name" value="db-draw"/>
  <property name="db.host" value="mysql"/>

  <target name="setup" depends="composer:install,dc:up,dc:ip"/>
  <target name="qa" depends="composer:validate,composer:normalize,cs:fix,phpstan:analyze,phpunit:run,plantuml:convert"/>

  <target name="dc:up" description="Launch containers">
    <exec executable="docker-compose" passthru="true" checkreturn="true">
      <arg line="--project-name ${dc.project-name}"/>
      <arg value="up"/>
      <arg value="--build"/>
      <arg value="--detach"/>
      <arg value="--remove-orphans"/>
    </exec>
  </target>

  <target name="dc:stop" description="Stop docker containers">
    <exec executable="docker-compose" passthru="true">
      <arg line="--project-name ${dc.project-name}"/>
      <arg value="stop"/>
    </exec>
  </target>

  <target name="dc:down" description="Take down containers, networks, images, and volumes">
    <exec executable="docker-compose" passthru="true">
      <arg line="--project-name ${dc.project-name}"/>
      <arg value="down"/>
      <arg value="--volumes"/>
      <arg value="--remove-orphans"/>
      <arg value="--rmi=local"/>
    </exec>
  </target>

  <target name="dc:ip" description="Reveal containers ip addresses">
    <property name="dc.format"
              value="--format='{{ .Name }}{{&quot;\t&quot;}}{{range .NetworkSettings.Networks}}{{.IPAddress}}{{&quot;\t&quot;}}{{end}}'"/>
    <exec executable="docker" checkreturn="true" passthru="true">
      <arg value="inspect"/>
      <arg line="${dc.format}"/>
      <arg value="${dc.project-name}-php-1"/>
      <arg value="${dc.project-name}-mysql-1"/>
    </exec>
  </target>

  <target name="dc:shell" description="Tunnel to container">
    <exec executable="docker" passthru="true">
      <arg value="exec"/>
      <arg value="-it"/>
      <arg value="${dc.project-name}-php-1"/>
      <arg value="/bin/bash"/>
    </exec>
  </target>

  <target name="remote:qa" description="Run tests on docker container">
    <exec executable="docker" passthru="true" checkreturn="true">
      <arg value="exec"/>
      <arg value="${dc.project-name}-php-1"/>
      <arg line="phing -longtargets qa"/>
    </exec>
  </target>

  <target name="phpstan:analyze" description="Analyze code at max level">
    <exec executable="vendor/bin/phpstan" passthru="true" checkreturn="true">
      <arg value="--ansi"/>
      <arg value="--no-interaction"/>
      <arg value="--level=max"/>
      <arg value="analyze"/>
      <arg value="--no-progress"/>
      <arg path="src"/>
    </exec>
    <exec executable="vendor/bin/phpstan" passthru="true" checkreturn="true">
      <arg value="clear-result-cache"/>
    </exec>
  </target>

  <target name="composer:validate" description="Validate composer.json">
    <composer command="validate">
      <arg value="--ansi"/>
    </composer>
  </target>

  <target name="composer:normalize" description="Normalize composer.json">
    <composer command="normalize">
      <arg value="--ansi"/>
    </composer>
  </target>

  <target name="composer:install" description="Install Composer dependencies">
    <composer command="install">
      <arg value="--no-interaction"/>
      <arg value="--prefer-dist"/>
      <arg value="--no-progress"/>
      <arg value="--ansi"/>
    </composer>
  </target>

  <target name="plantuml:convert" description="Convert puml to png">
    <exec executable="vendor/bin/plantuml" checkreturn="true" passthru="true">
      <arg value="-tpng"/>
      <arg value="-nometadata"/>
      <arg value="-output"/>
      <arg path="docs/images"/>
      <arg file="resources/output/*.puml"/>
    </exec>
  </target>

  <target name="phpunit:run" description="Run PHPUnit tests" depends="db:wait-for-database">
    <mkdir dir="resources/output/"/>
    <exec executable="vendor/bin/phpunit" passthru="true" checkreturn="true">
      <env key="DB_HOST" value="${db.host}"/>
      <env key="XDEBUG_MODE" value="coverage"/>
      <arg value="--testdox"/>
    </exec>
  </target>

  <target name="db:wait-for-database" description="Wait until DB is up and running">
    <waitfor timeoutproperty="db.timeout" maxwait="30" maxwaitunit="second">
      <pdosqlexec url="mysql:host=${db.host};dbname=institute;port=3306" userid="groot" password="groot"/>
    </waitfor>
    <fail if="db.timeout">Cannot reach database.</fail>
  </target>

  <target name="help">
    <uptodate property="visualizer.up-to-date" srcfile="build.xml" targetfile="docs/images/build.png"/>
    <runtarget target="visualizer"/>
    <exec executable="xdg-open" spawn="true">
      <arg file="docs/images/build.png"/>
    </exec>
  </target>

  <target name="visualizer" unless="visualizer.up-to-date">
    <visualizer format="svg" destination="docs/images" direction="horizontal"/>
  </target>

  <target name="cs:fix" description="Fix code style">
    <exec executable="vendor/bin/php-cs-fixer" passthru="true" checkreturn="true">
      <arg value="fix"/>
    </exec>
  </target>

  <target name="mkdocs:build" description="Build documentation">
    <exec executable="mkdocs" passthru="true" checkreturn="true">
      <arg value="build"/>
      <arg value="--verbose"/>
    </exec>
  </target>

  <target name="mkdocs:serve" description="Run local server">
    <exec executable="mkdocs" passthru="true" checkreturn="true">
      <arg value="serve"/>
      <arg value="--verbose"/>
    </exec>
  </target>

  <target name="mkdocs:gh-deploy" description="Deploy docs to github">
    <exec executable="mkdocs" passthru="true" checkreturn="true">
      <arg value="gh-deploy"/>
      <arg value="--verbose"/>
    </exec>
  </target>

</project>
